{"ast":null,"code":"import _regeneratorRuntime from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/src/App.js\";\nimport React, { Component } from \"react\";\nimport Home from \"./Pages/Home/Home\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(_props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, _props));\n\n    _this.getContact = function _callee(id) {\n      var previous_contact, response, result, contact, contacts;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              // check if we already have the contact\n              previous_contact = _this.state.contacts.find(function (contact) {\n                return contact.id === id;\n              });\n\n              if (!previous_contact) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              _context.prev = 3;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/contact/\".concat(id)));\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              result = _context.sent;\n\n              if (result.success) {\n                // add the user to the current list of contacts\n                contact = result.result;\n                contacts = [].concat(_toConsumableArray(_this.state.contacts), [contact]);\n\n                _this.setState({\n                  contacts: contacts,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: result.message\n                });\n              }\n\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](3);\n\n              _this.setState({\n                error: _context.t0\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[3, 13]]);\n    };\n\n    _this.deleteContact = function _callee2(id) {\n      var response, result, contacts;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/contacts/delete/\".concat(id)));\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              result = _context2.sent;\n\n              if (result.success) {\n                // remove the user from the current list of users\n                contacts = _this.state.contacts.filter(function (contact) {\n                  return contact.id !== id;\n                });\n\n                _this.setState({\n                  contacts: contacts,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: result.message\n                });\n              }\n\n              _context2.next = 13;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              _this.setState({\n                error: _context2.t0\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 10]]);\n    };\n\n    _this.updateContact = function _callee3(id, props) {\n      var url, name, email, response, result, contacts;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n\n              if (!(!props && !props.name && !props.email)) {\n                _context3.next = 3;\n                break;\n              }\n\n              throw new Error(\"you need at least name or email properties to update a contact\");\n\n            case 3:\n              url = \"\";\n              name = props.name, email = props.email;\n\n              if (name && email) {\n                url = \"http://localhost:8080/contacts/update/\".concat(id, \"?name=\").concat(name, \"&email=\").concat(email);\n              }\n\n              if (name) {\n                url = \"http://localhost:8080/contacts/update/\".concat(id, \"?name=\").concat(name);\n              }\n\n              if (email) {\n                url = \"http://localhost:8080/contacts/update/\".concat(id, \"?email=\").concat(email);\n              }\n\n              _context3.next = 10;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 10:\n              response = _context3.sent;\n              _context3.next = 13;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 13:\n              result = _context3.sent;\n\n              if (result.success) {\n                // we update the user, to reproduce the database changes:\n                contacts = _this.state.contacts.map(function (contact) {\n                  // if this is the contact we need to change, update it. This will apply to exactly\n                  // one contact\n                  if (contact.id === id) {\n                    var new_contact = {\n                      id: contact.id,\n                      name: props.name || contact.name,\n                      email: props.email || contact.email\n                    };\n                    return new_contact;\n                  } // otherwise, don't change the contact at all\n                  else {\n                      return contact;\n                    }\n                });\n\n                _this.setState({\n                  contacts: contacts,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: result.message\n                });\n              }\n\n              _context3.next = 20;\n              break;\n\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](0);\n\n              _this.setState({\n                error: _context3.t0\n              });\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[0, 17]]);\n    };\n\n    _this.createContact = function _callee4(props) {\n      var name, email, response, result, id, contact, contacts;\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n\n              if (!(!props || !(props.name && props.email))) {\n                _context4.next = 3;\n                break;\n              }\n\n              throw new Error(\"you need both name and email properties to create a contact\");\n\n            case 3:\n              name = props.name, email = props.email;\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/contacts/create?name=\".concat(name, \"&email=\").concat(email)));\n\n            case 6:\n              response = _context4.sent;\n              _context4.next = 9;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 9:\n              result = _context4.sent;\n\n              if (result.success) {\n                // we reproduce the user that was created in the database, locally\n                id = result.result;\n                contact = {\n                  name: name,\n                  email: email,\n                  id: id\n                };\n                contacts = [].concat(_toConsumableArray(_this.state.contacts), [contact]);\n\n                _this.setState({\n                  contacts: contacts,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: result.message\n                });\n              }\n\n              _context4.next = 16;\n              break;\n\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](0);\n\n              _this.setState({\n                error: _context4.t0.message\n              });\n\n            case 16:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, [[0, 13]]);\n    };\n\n    _this.getContactList = function _callee5() {\n      var response, result;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return _regeneratorRuntime.awrap(fetch(\"http://localhost:8080/contacts\"));\n\n            case 3:\n              response = _context5.sent;\n              _context5.next = 6;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 6:\n              result = _context5.sent;\n              console.log(result);\n\n              if (result.success) {\n                _this.setState({\n                  contacts: result.result,\n                  error: \"\"\n                });\n              } else {\n                _this.setState({\n                  error: result.message\n                });\n              }\n\n              _context5.next = 14;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](0);\n\n              _this.setState({\n                error: _context5.t0\n              });\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, [[0, 11]]);\n    };\n\n    _this.state = {\n      contacts: [],\n      error: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              this.getContactList();\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.state.error ? React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, this.state.error) : false, \"Contact List:\", React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.state.contacts.map(function (contact) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }, contact.name);\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/front/src/App.js"],"names":["React","Component","Home","App","props","getContact","id","previous_contact","state","contacts","find","contact","fetch","response","json","result","success","setState","error","message","deleteContact","filter","updateContact","name","email","Error","url","map","new_contact","createContact","getContactList","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;IACMC,G;;;;;AACJ,eAAYC,MAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,MAAN;;AADiB,UAKnBC,UALmB,GAKN,iBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACX;AACMC,cAAAA,gBAFK,GAEc,MAAKC,KAAL,CAAWC,QAAX,CAAoBC,IAApB,CACvB,UAAAC,OAAO;AAAA,uBAAIA,OAAO,CAACL,EAAR,KAAeA,EAAnB;AAAA,eADgB,CAFd;;AAAA,mBAKPC,gBALO;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,+CAScK,KAAK,yCAAkCN,EAAlC,EATnB;;AAAA;AASHO,cAAAA,QATG;AAAA;AAAA,+CAUYA,QAAQ,CAACC,IAAT,EAVZ;;AAAA;AAUHC,cAAAA,MAVG;;AAWT,kBAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB;AACML,gBAAAA,OAFY,GAEFI,MAAM,CAACA,MAFL;AAGZN,gBAAAA,QAHY,gCAGG,MAAKD,KAAL,CAAWC,QAHd,IAGwBE,OAHxB;;AAIlB,sBAAKM,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAARA,QAAF;AAAYS,kBAAAA,KAAK,EAAE;AAAnB,iBAAd;AACD,eALD,MAKO;AACL,sBAAKD,QAAL,CAAc;AAAEC,kBAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,iBAAd;AACD;;AAlBQ;AAAA;;AAAA;AAAA;AAAA;;AAoBT,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,KAAK;AAAP,eAAd;;AApBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALM;;AAAA,UA6BnBE,aA7BmB,GA6BH,kBAAMd,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEWM,KAAK,iDACeN,EADf,EAFhB;;AAAA;AAENO,cAAAA,QAFM;AAAA;AAAA,+CAKSA,QAAQ,CAACC,IAAT,EALT;;AAAA;AAKNC,cAAAA,MALM;;AAMZ,kBAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB;AACMP,gBAAAA,QAFY,GAED,MAAKD,KAAL,CAAWC,QAAX,CAAoBY,MAApB,CACf,UAAAV,OAAO;AAAA,yBAAIA,OAAO,CAACL,EAAR,KAAeA,EAAnB;AAAA,iBADQ,CAFC;;AAKlB,sBAAKW,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAARA,QAAF;AAAYS,kBAAAA,KAAK,EAAE;AAAnB,iBAAd;AACD,eAND,MAMO;AACL,sBAAKD,QAAL,CAAc;AAAEC,kBAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,iBAAd;AACD;;AAdW;AAAA;;AAAA;AAAA;AAAA;;AAgBZ,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,KAAK;AAAP,eAAd;;AAhBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA7BG;;AAAA,UAiDnBI,aAjDmB,GAiDH,kBAAOhB,EAAP,EAAWF,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAER,CAACA,KAAD,IAAU,CAACA,KAAK,CAACmB,IAAjB,IAAyB,CAACnB,KAAK,CAACoB,KAFxB;AAAA;AAAA;AAAA;;AAAA,oBAGJ,IAAIC,KAAJ,kEAHI;;AAAA;AAORC,cAAAA,GAPQ,GAOF,EAPE;AAQJH,cAAAA,IARI,GAQYnB,KARZ,CAQJmB,IARI,EAQEC,KARF,GAQYpB,KARZ,CAQEoB,KARF;;AAUZ,kBAAID,IAAI,IAAIC,KAAZ,EAAmB;AACjBE,gBAAAA,GAAG,mDAA4CpB,EAA5C,mBAAuDiB,IAAvD,oBAAqEC,KAArE,CAAH;AACD;;AACD,kBAAID,IAAJ,EAAU;AACRG,gBAAAA,GAAG,mDAA4CpB,EAA5C,mBAAuDiB,IAAvD,CAAH;AACD;;AACD,kBAAIC,KAAJ,EAAW;AACTE,gBAAAA,GAAG,mDAA4CpB,EAA5C,oBAAwDkB,KAAxD,CAAH;AACD;;AAlBW;AAAA,+CAmBWZ,KAAK,CAACc,GAAD,CAnBhB;;AAAA;AAmBNb,cAAAA,QAnBM;AAAA;AAAA,+CAoBSA,QAAQ,CAACC,IAAT,EApBT;;AAAA;AAoBNC,cAAAA,MApBM;;AAqBZ,kBAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB;AACMP,gBAAAA,QAFY,GAED,MAAKD,KAAL,CAAWC,QAAX,CAAoBkB,GAApB,CAAwB,UAAAhB,OAAO,EAAI;AAClD;AACA;AACA,sBAAIA,OAAO,CAACL,EAAR,KAAeA,EAAnB,EAAuB;AACrB,wBAAMsB,WAAW,GAAG;AAClBtB,sBAAAA,EAAE,EAAEK,OAAO,CAACL,EADM;AAElBiB,sBAAAA,IAAI,EAAEnB,KAAK,CAACmB,IAAN,IAAcZ,OAAO,CAACY,IAFV;AAGlBC,sBAAAA,KAAK,EAAEpB,KAAK,CAACoB,KAAN,IAAeb,OAAO,CAACa;AAHZ,qBAApB;AAKA,2BAAOI,WAAP;AACD,mBAPD,CAQA;AARA,uBASK;AACH,6BAAOjB,OAAP;AACD;AACF,iBAfgB,CAFC;;AAkBlB,sBAAKM,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAARA,QAAF;AAAYS,kBAAAA,KAAK,EAAE;AAAnB,iBAAd;AACD,eAnBD,MAmBO;AACL,sBAAKD,QAAL,CAAc;AAAEC,kBAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,iBAAd;AACD;;AA1CW;AAAA;;AAAA;AAAA;AAAA;;AA4CZ,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,KAAK;AAAP,eAAd;;AA5CY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjDG;;AAAA,UAiGnBW,aAjGmB,GAiGH,kBAAMzB,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,oBAER,CAACA,KAAD,IAAU,EAAEA,KAAK,CAACmB,IAAN,IAAcnB,KAAK,CAACoB,KAAtB,CAFF;AAAA;AAAA;AAAA;;AAAA,oBAGJ,IAAIC,KAAJ,+DAHI;;AAAA;AAOJF,cAAAA,IAPI,GAOYnB,KAPZ,CAOJmB,IAPI,EAOEC,KAPF,GAOYpB,KAPZ,CAOEoB,KAPF;AAAA;AAAA,+CAQWZ,KAAK,sDACoBW,IADpB,oBACkCC,KADlC,EARhB;;AAAA;AAQNX,cAAAA,QARM;AAAA;AAAA,+CAWSA,QAAQ,CAACC,IAAT,EAXT;;AAAA;AAWNC,cAAAA,MAXM;;AAYZ,kBAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB;AACMV,gBAAAA,EAFY,GAEPS,MAAM,CAACA,MAFA;AAGZJ,gBAAAA,OAHY,GAGF;AAAEY,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,KAAK,EAALA,KAAR;AAAelB,kBAAAA,EAAE,EAAFA;AAAf,iBAHE;AAIZG,gBAAAA,QAJY,gCAIG,MAAKD,KAAL,CAAWC,QAJd,IAIwBE,OAJxB;;AAKlB,sBAAKM,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAARA,QAAF;AAAYS,kBAAAA,KAAK,EAAE;AAAnB,iBAAd;AACD,eAND,MAMO;AACL,sBAAKD,QAAL,CAAc;AAAEC,kBAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,iBAAd;AACD;;AApBW;AAAA;;AAAA;AAAA;AAAA;;AAsBZ,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,KAAK,EAAE,aAAIC;AAAb,eAAd;;AAtBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjGG;;AAAA,UA2HnBW,cA3HmB,GA2HF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEUlB,KAAK,CAAC,gCAAD,CAFf;;AAAA;AAEPC,cAAAA,QAFO;AAAA;AAAA,+CAGQA,QAAQ,CAACC,IAAT,EAHR;;AAAA;AAGPC,cAAAA,MAHO;AAIbgB,cAAAA,OAAO,CAACC,GAAR,CAAYjB,MAAZ;;AACA,kBAAIA,MAAM,CAACC,OAAX,EAAoB;AAClB,sBAAKC,QAAL,CAAc;AAAER,kBAAAA,QAAQ,EAAEM,MAAM,CAACA,MAAnB;AAA2BG,kBAAAA,KAAK,EAAE;AAAlC,iBAAd;AACD,eAFD,MAEO;AACL,sBAAKD,QAAL,CAAc;AAAEC,kBAAAA,KAAK,EAAEH,MAAM,CAACI;AAAhB,iBAAd;AACD;;AATY;AAAA;;AAAA;AAAA;AAAA;;AAWb,oBAAKF,QAAL,CAAc;AAAEC,gBAAAA,KAAK;AAAP,eAAd;;AAXa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3HE;;AAEjB,UAAKV,KAAL,GAAa;AAAEC,MAAAA,QAAQ,EAAE,EAAZ;AAAgBS,MAAAA,KAAK,EAAE;AAAvB,KAAb;AAFiB;AAGlB;;;;;;;;;AAuIC,mBAAKY,cAAL;;;;;;;;;;;6BAEO;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtB,KAAL,CAAWU,KAAX,GAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKV,KAAL,CAAWU,KAAf,CAAnB,GAA+C,KADlD,mBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKV,KAAL,CAAWC,QAAX,CAAoBkB,GAApB,CAAwB,UAAAhB,OAAO;AAAA,eAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKA,OAAO,CAACY,IAAb,CAD8B;AAAA,OAA/B,CADH,CAHF,CADF;AAWD;;;;EAzJetB,S;;AA4JlB,eAAeE,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Home from \"./Pages/Home/Home\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { contacts: [], error: \"\" };\n  }\n\n  getContact = async id => {\n    // check if we already have the contact\n    const previous_contact = this.state.contacts.find(\n      contact => contact.id === id\n    );\n    if (previous_contact) {\n      return; // do nothing, no need to reload a contact we already have\n    }\n    try {\n      const response = await fetch(`http://localhost:8080/contact/${id}`);\n      const result = await response.json();\n      if (result.success) {\n        // add the user to the current list of contacts\n        const contact = result.result;\n        const contacts = [...this.state.contacts, contact];\n        this.setState({ contacts, error: \"\" });\n      } else {\n        this.setState({ error: result.message });\n      }\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  };\n\n  deleteContact = async id => {\n    try {\n      const response = await fetch(\n        `http://localhost:8080/contacts/delete/${id}`\n      );\n      const result = await response.json();\n      if (result.success) {\n        // remove the user from the current list of users\n        const contacts = this.state.contacts.filter(\n          contact => contact.id !== id\n        );\n        this.setState({ contacts, error: \"\" });\n      } else {\n        this.setState({ error: result.message });\n      }\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  };\n\n  updateContact = async (id, props) => {\n    try {\n      if (!props && !props.name && !props.email) {\n        throw new Error(\n          `you need at least name or email properties to update a contact`\n        );\n      }\n      let url = \"\";\n      const { name, email } = props;\n\n      if (name && email) {\n        url = `http://localhost:8080/contacts/update/${id}?name=${name}&email=${email}`;\n      }\n      if (name) {\n        url = `http://localhost:8080/contacts/update/${id}?name=${name}`;\n      }\n      if (email) {\n        url = `http://localhost:8080/contacts/update/${id}?email=${email}`;\n      }\n      const response = await fetch(url);\n      const result = await response.json();\n      if (result.success) {\n        // we update the user, to reproduce the database changes:\n        const contacts = this.state.contacts.map(contact => {\n          // if this is the contact we need to change, update it. This will apply to exactly\n          // one contact\n          if (contact.id === id) {\n            const new_contact = {\n              id: contact.id,\n              name: props.name || contact.name,\n              email: props.email || contact.email\n            };\n            return new_contact;\n          }\n          // otherwise, don't change the contact at all\n          else {\n            return contact;\n          }\n        });\n        this.setState({ contacts, error: \"\" });\n      } else {\n        this.setState({ error: result.message });\n      }\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  };\n\n  createContact = async props => {\n    try {\n      if (!props || !(props.name && props.email)) {\n        throw new Error(\n          `you need both name and email properties to create a contact`\n        );\n      }\n      const { name, email } = props;\n      const response = await fetch(\n        `http://localhost:8080/contacts/create?name=${name}&email=${email}`\n      );\n      const result = await response.json();\n      if (result.success) {\n        // we reproduce the user that was created in the database, locally\n        const id = result.result;\n        const contact = { name, email, id };\n        const contacts = [...this.state.contacts, contact];\n        this.setState({ contacts, error: \"\" });\n      } else {\n        this.setState({ error: result.message });\n      }\n    } catch (err) {\n      this.setState({ error: err.message });\n    }\n  };\n\n  getContactList = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/contacts\");\n      const result = await response.json();\n      console.log(result);\n      if (result.success) {\n        this.setState({ contacts: result.result, error: \"\" });\n      } else {\n        this.setState({ error: result.message });\n      }\n    } catch (err) {\n      this.setState({ error: err });\n    }\n  };\n  async componentDidMount() {\n    this.getContactList();\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.error ? <p>{this.state.error}</p> : false}\n        Contact List:\n        <ul>\n          {this.state.contacts.map(contact => (\n            <li>{contact.name}</li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}