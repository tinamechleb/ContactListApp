{
  "{\"sourceRoot\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"filename\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/index.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/index.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/index.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "optionalChaining",
          "nullishCoalescingOperator",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _app = _interopRequireDefault(require(\"./app\"));\n\nvar _db = _interopRequireDefault(require(\"./db\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar start =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6() {\n    var controller;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return (0, _db[\"default\"])();\n\n          case 2:\n            controller = _context6.sent;\n\n            _app[\"default\"].get(\"/\", function (req, res, next) {\n              try {\n                res.json({\n                  message: \"Hello\"\n                });\n              } catch (err) {\n                next(err);\n              }\n            });\n\n            _app[\"default\"].get(\"/contacts\",\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee(req, res, next) {\n                var orderBy, result;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        orderBy = req.query.orderBy;\n                        _context.prev = 1;\n                        _context.next = 4;\n                        return controller.getContacts(orderBy);\n\n                      case 4:\n                        result = _context.sent;\n                        res.json({\n                          success: true,\n                          result: result\n                        });\n                        _context.next = 11;\n                        break;\n\n                      case 8:\n                        _context.prev = 8;\n                        _context.t0 = _context[\"catch\"](1);\n                        next(_context.t0);\n\n                      case 11:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[1, 8]]);\n              }));\n\n              return function (_x, _x2, _x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }());\n\n            _app[\"default\"].get(\"/contact/:id\",\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee2(req, res, next) {\n                var id, result;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        id = req.params.id;\n                        _context2.prev = 1;\n                        _context2.next = 4;\n                        return controller.getContactByID(id);\n\n                      case 4:\n                        result = _context2.sent;\n                        res.json({\n                          success: true,\n                          result: result\n                        });\n                        _context2.next = 11;\n                        break;\n\n                      case 8:\n                        _context2.prev = 8;\n                        _context2.t0 = _context2[\"catch\"](1);\n                        next(_context2.t0);\n\n                      case 11:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[1, 8]]);\n              }));\n\n              return function (_x4, _x5, _x6) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n\n            _app[\"default\"].get(\"/contacts/create\",\n            /*#__PURE__*/\n            function () {\n              var _ref4 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee3(req, res, next) {\n                var _req$query, name, email, result;\n\n                return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        _req$query = req.query, name = _req$query.name, email = _req$query.email;\n                        console.log(req.query);\n                        _context3.prev = 2;\n                        _context3.next = 5;\n                        return controller.createContact({\n                          name: name,\n                          email: email\n                        });\n\n                      case 5:\n                        result = _context3.sent;\n                        res.json({\n                          success: true,\n                          result: result\n                        });\n                        _context3.next = 12;\n                        break;\n\n                      case 9:\n                        _context3.prev = 9;\n                        _context3.t0 = _context3[\"catch\"](2);\n                        next(_context3.t0);\n\n                      case 12:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, null, [[2, 9]]);\n              }));\n\n              return function (_x7, _x8, _x9) {\n                return _ref4.apply(this, arguments);\n              };\n            }());\n\n            _app[\"default\"].get(\"/contacts/delete/:id\",\n            /*#__PURE__*/\n            function () {\n              var _ref5 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee4(req, res, next) {\n                var id, result;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        id = req.params.id;\n                        _context4.prev = 1;\n                        _context4.next = 4;\n                        return controller.deleteContact(id);\n\n                      case 4:\n                        result = _context4.sent;\n                        res.json({\n                          success: true,\n                          result: result\n                        });\n                        _context4.next = 11;\n                        break;\n\n                      case 8:\n                        _context4.prev = 8;\n                        _context4.t0 = _context4[\"catch\"](1);\n                        next(_context4.t0);\n\n                      case 11:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[1, 8]]);\n              }));\n\n              return function (_x10, _x11, _x12) {\n                return _ref5.apply(this, arguments);\n              };\n            }());\n\n            _app[\"default\"].get(\"/contacts/update/:id\",\n            /*#__PURE__*/\n            function () {\n              var _ref6 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee5(req, res, next) {\n                var id, _req$query2, name, email, result;\n\n                return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        id = req.params.id;\n                        _req$query2 = req.query, name = _req$query2.name, email = _req$query2.email;\n                        _context5.prev = 2;\n                        _context5.next = 5;\n                        return controller.updateContact(id, {\n                          name: name,\n                          email: email\n                        });\n\n                      case 5:\n                        result = _context5.sent;\n                        res.json({\n                          success: true,\n                          result: result\n                        });\n                        _context5.next = 12;\n                        break;\n\n                      case 9:\n                        _context5.prev = 9;\n                        _context5.t0 = _context5[\"catch\"](2);\n                        next(_context5.t0);\n\n                      case 12:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5, null, [[2, 9]]);\n              }));\n\n              return function (_x13, _x14, _x15) {\n                return _ref6.apply(this, arguments);\n              };\n            }());\n\n            _app[\"default\"].use(function (err, req, res, next) {\n              res.status(500).json({\n                success: false,\n                message: err\n              });\n            });\n\n            _app[\"default\"].listen(8080, function () {\n              console.log(\"Listening on port 8080\");\n            });\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function start() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nstart();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInN0YXJ0IiwiY29udHJvbGxlciIsImFwcCIsImdldCIsInJlcSIsInJlcyIsIm5leHQiLCJqc29uIiwibWVzc2FnZSIsImVyciIsIm9yZGVyQnkiLCJxdWVyeSIsImdldENvbnRhY3RzIiwicmVzdWx0Iiwic3VjY2VzcyIsImlkIiwicGFyYW1zIiwiZ2V0Q29udGFjdEJ5SUQiLCJuYW1lIiwiZW1haWwiLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlQ29udGFjdCIsImRlbGV0ZUNvbnRhY3QiLCJ1cGRhdGVDb250YWN0IiwidXNlIiwic3RhdHVzIiwibGlzdGVuIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLElBQU1BLEtBQUs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDBCQUFHO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsbUJBQ2EscUJBRGI7O0FBQUE7QUFDTkMsWUFBQUEsVUFETTs7QUFFWkMsNEJBQUlDLEdBQUosQ0FBUSxHQUFSLEVBQWEsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLElBQVgsRUFBb0I7QUFDL0Isa0JBQUk7QUFDRkQsZ0JBQUFBLEdBQUcsQ0FBQ0UsSUFBSixDQUFTO0FBQUVDLGtCQUFBQSxPQUFPLEVBQUU7QUFBWCxpQkFBVDtBQUNELGVBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkgsZ0JBQUFBLElBQUksQ0FBQ0csR0FBRCxDQUFKO0FBQ0Q7QUFDRixhQU5EOztBQVFBUCw0QkFBSUMsR0FBSixDQUFRLFdBQVI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNDQUFxQixpQkFBT0MsR0FBUCxFQUFZQyxHQUFaLEVBQWlCQyxJQUFqQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDWEksd0JBQUFBLE9BRFcsR0FDQ04sR0FBRyxDQUFDTyxLQURMLENBQ1hELE9BRFc7QUFBQTtBQUFBO0FBQUEsK0JBR0lULFVBQVUsQ0FBQ1csV0FBWCxD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UCxjQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWjtBQUNELGFBRkQ7O0FBakVZO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUg7O0FBQUEsa0JBQUxyQixLQUFLO0FBQUE7QUFBQTtBQUFBLEdBQVg7O0FBcUVBQSxLQUFLIiwic291cmNlUm9vdCI6Ii9ob21lL25vdHJvb3QvRG9jdW1lbnRzL0NvZGlXb3JrL0NvbnRhY3RMaXN0QXBwU2FtYXIvQ29udGFjdExpc3RBcHAtQjA1LzAzX2NydWQgaW4gcmVhY3QvYmFjay9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyIvL2ltcG9ydCB7Y3JlYXRlU2VydmVyfSBmcm9tICdodHRwJztcbmltcG9ydCBhcHAgZnJvbSBcIi4vYXBwXCI7XG5pbXBvcnQgaW5pdGlhbGl6ZURhdGFiYXNlIGZyb20gXCIuL2RiXCI7XG5cbmNvbnN0IHN0YXJ0ID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjb250cm9sbGVyID0gYXdhaXQgaW5pdGlhbGl6ZURhdGFiYXNlKCk7XG4gIGFwcC5nZXQoXCIvXCIsIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXMuanNvbih7IG1lc3NhZ2U6IFwiSGVsbG9cIiB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9XG4gIH0pO1xuIFxuICBhcHAuZ2V0KFwiL2NvbnRhY3RzXCIsIGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgb3JkZXJCeSB9ID0gcmVxLnF1ZXJ5O1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmdldENvbnRhY3RzKG9yZGVyQnkpO1xuICAgICAgcmVzLmpzb24oeyBzdWNjZXNzOiB0cnVlLCByZXN1bHQgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9KTtcblxuICBhcHAuZ2V0KFwiL2NvbnRhY3QvOmlkXCIsIGFzeW5jIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGNvbnN0IHsgaWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIuZ2V0Q29udGFjdEJ5SUQoaWQpO1xuICAgICAgcmVzLmpzb24oeyBzdWNjZXNzOiB0cnVlLCByZXN1bHQgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9KTtcblxuICBhcHAuZ2V0KFwiL2NvbnRhY3RzL2NyZWF0ZVwiLCBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zdCB7IG5hbWUsIGVtYWlsIH0gPSByZXEucXVlcnk7XG4gICAgY29uc29sZS5sb2cocmVxLnF1ZXJ5KTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY29udHJvbGxlci5jcmVhdGVDb250YWN0KHsgbmFtZSwgZW1haWwgfSk7XG4gICAgICByZXMuanNvbih7IHN1Y2Nlc3M6IHRydWUsIHJlc3VsdCB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIG5leHQoZXJyKTtcbiAgICB9XG4gIH0pO1xuXG4gIGFwcC5nZXQoXCIvY29udGFjdHMvZGVsZXRlLzppZFwiLCBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBjb250cm9sbGVyLmRlbGV0ZUNvbnRhY3QoaWQpO1xuICAgICAgcmVzLmpzb24oeyBzdWNjZXNzOiB0cnVlLCByZXN1bHQgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBuZXh0KGVycik7XG4gICAgfVxuICB9KTtcblxuICBhcHAuZ2V0KFwiL2NvbnRhY3RzL3VwZGF0ZS86aWRcIiwgYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gICAgY29uc3QgeyBpZCB9ID0gcmVxLnBhcmFtcztcbiAgICBjb25zdCB7IG5hbWUsIGVtYWlsIH0gPSByZXEucXVlcnk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNvbnRyb2xsZXIudXBkYXRlQ29udGFjdChpZCwgeyBuYW1lLCBlbWFpbCB9KTtcbiAgICAgIHJlcy5qc29uKHsgc3VjY2VzczogdHJ1ZSwgcmVzdWx0IH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbmV4dChlcnIpO1xuICAgIH1cbiAgfSk7XG4gIGFwcC51c2UoKGVyciwgcmVxLCByZXMsIG5leHQpID0+IHtcbiAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiBlcnIgfSk7XG4gIH0pO1xuXG4gIGFwcC5saXN0ZW4oODA4MCwgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKFwiTGlzdGVuaW5nIG9uIHBvcnQgODA4MFwiKTtcbiAgfSk7XG59O1xuc3RhcnQoKTtcbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "start",
        "controller",
        "app",
        "get",
        "req",
        "res",
        "next",
        "json",
        "message",
        "err",
        "orderBy",
        "query",
        "getContacts",
        "result",
        "success",
        "id",
        "params",
        "getContactByID",
        "name",
        "email",
        "console",
        "log",
        "createContact",
        "deleteContact",
        "updateContact",
        "use",
        "status",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "sourcesContent": [
        "//import {createServer} from 'http';\nimport app from \"./app\";\nimport initializeDatabase from \"./db\";\n\nconst start = async () => {\n  const controller = await initializeDatabase();\n  app.get(\"/\", (req, res, next) => {\n    try {\n      res.json({ message: \"Hello\" });\n    } catch (err) {\n      next(err);\n    }\n  });\n \n  app.get(\"/contacts\", async (req, res, next) => {\n    const { orderBy } = req.query;\n    try {\n      const result = await controller.getContacts(orderBy);\n      res.json({ success: true, result });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.get(\"/contact/:id\", async (req, res, next) => {\n    const { id } = req.params;\n    try {\n      const result = await controller.getContactByID(id);\n      res.json({ success: true, result });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.get(\"/contacts/create\", async (req, res, next) => {\n    const { name, email } = req.query;\n    console.log(req.query);\n    try {\n      const result = await controller.createContact({ name, email });\n      res.json({ success: true, result });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.get(\"/contacts/delete/:id\", async (req, res, next) => {\n    const { id } = req.params;\n    try {\n      const result = await controller.deleteContact(id);\n      res.json({ success: true, result });\n    } catch (err) {\n      next(err);\n    }\n  });\n\n  app.get(\"/contacts/update/:id\", async (req, res, next) => {\n    const { id } = req.params;\n    const { name, email } = req.query;\n    try {\n      const result = await controller.updateContact(id, { name, email });\n      res.json({ success: true, result });\n    } catch (err) {\n      next(err);\n    }\n  });\n  app.use((err, req, res, next) => {\n    res.status(500).json({ success: false, message: err });\n  });\n\n  app.listen(8080, () => {\n    console.log(\"Listening on port 8080\");\n  });\n};\nstart();\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1581942819728
  },
  "{\"sourceRoot\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"filename\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/app.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/app.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/app.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "optionalChaining",
          "nullishCoalescingOperator",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _cors = _interopRequireDefault(require(\"cors\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n;\nvar app = (0, _express[\"default\"])();\napp.use((0, _cors[\"default\"])());\nvar _default = app;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUQ4QjtBQUU5QixJQUFNQSxHQUFHLEdBQUcsMEJBQVo7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsdUJBQVI7ZUFDZUQsRyIsInNvdXJjZVJvb3QiOiIvaG9tZS9ub3Ryb290L0RvY3VtZW50cy9Db2RpV29yay9Db250YWN0TGlzdEFwcFNhbWFyL0NvbnRhY3RMaXN0QXBwLUIwNS8wM19jcnVkIGluIHJlYWN0L2JhY2svc3JjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7O1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5hcHAudXNlKGNvcnMoKSk7XG5leHBvcnQgZGVmYXVsdCBhcHA7XG5cbiJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "app",
        "use"
      ],
      "mappings": ";;;;;;;AAAA;;AACA;;;;AAD8B;AAE9B,IAAMA,GAAG,GAAG,0BAAZ;AACAA,GAAG,CAACC,GAAJ,CAAQ,uBAAR;eACeD,G",
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "sourcesContent": [
        "import express from 'express';;\nimport cors from 'cors';\nconst app = express();\napp.use(cors());\nexport default app;\n\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1581942819728
  },
  "{\"sourceRoot\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"filename\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/db.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.8.3": {
    "metadata": {},
    "options": {
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/db.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/db.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "optionalChaining",
          "nullishCoalescingOperator",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src/db.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
        "sourceFileName": "db.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _sqlite = _interopRequireDefault(require(\"sqlite\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar initializeDatabase =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee6() {\n    var db, getContacts, getContactByID, createContact, deleteContact, updateContact, controller;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _sqlite[\"default\"].open(\"./db.sqlite\");\n\n          case 2:\n            db = _context6.sent;\n\n            getContacts =\n            /*#__PURE__*/\n            function () {\n              var _ref2 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee(orderBy) {\n                var stmt, rows;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        stmt = \"SELECT contact_id AS id, name, email FROM contacts\";\n                        _context.t0 = orderBy;\n                        _context.next = _context.t0 === \"name\" ? 4 : _context.t0 === \"email\" ? 6 : 8;\n                        break;\n\n                      case 4:\n                        stmt += \" order by name desc\";\n                        return _context.abrupt(\"break\", 9);\n\n                      case 6:\n                        stmt += \" order by email desc\";\n                        return _context.abrupt(\"break\", 9);\n\n                      case 8:\n                        return _context.abrupt(\"break\", 9);\n\n                      case 9:\n                        _context.prev = 9;\n                        _context.next = 12;\n                        return db.all(stmt);\n\n                      case 12:\n                        rows = _context.sent;\n\n                        if (!(rows.length == 0)) {\n                          _context.next = 15;\n                          break;\n                        }\n\n                        throw new Error(\"Contacts are empty!\");\n\n                      case 15:\n                        return _context.abrupt(\"return\", rows);\n\n                      case 18:\n                        _context.prev = 18;\n                        _context.t1 = _context[\"catch\"](9);\n                        throw new Error(\"Could not retrieve list of contacts\");\n\n                      case 21:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[9, 18]]);\n              }));\n\n              return function getContacts(_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            getContactByID =\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee2(id) {\n                var rows;\n                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.prev = 0;\n                        _context2.next = 3;\n                        return db.all(\"SELECT contact_id AS id, name, email FROM contacts where contact_id=\".concat(id));\n\n                      case 3:\n                        rows = _context2.sent;\n\n                        if (!(rows.length == 0)) {\n                          _context2.next = 6;\n                          break;\n                        }\n\n                        throw new Error(\"Contact with id \".concat(id, \" is not found\"));\n\n                      case 6:\n                        return _context2.abrupt(\"return\", rows);\n\n                      case 9:\n                        _context2.prev = 9;\n                        _context2.t0 = _context2[\"catch\"](0);\n                        throw new Error(\"Could not retrieve contact\");\n\n                      case 12:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2, null, [[0, 9]]);\n              }));\n\n              return function getContactByID(_x2) {\n                return _ref3.apply(this, arguments);\n              };\n            }();\n\n            createContact =\n            /*#__PURE__*/\n            function () {\n              var _ref4 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee3(props) {\n                var name, email, result;\n                return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        name = props.name, email = props.email;\n\n                        if (!(!props || !name || !email)) {\n                          _context3.next = 3;\n                          break;\n                        }\n\n                        throw new Error(\"You must provide a name and email\");\n\n                      case 3:\n                        _context3.prev = 3;\n                        _context3.next = 6;\n                        return db.run(\"Insert into contacts (name, email) values ('\".concat(name, \"', '\").concat(email, \"')\"));\n\n                      case 6:\n                        result = _context3.sent;\n                        return _context3.abrupt(\"return\", result.stmt.lastID);\n\n                      case 10:\n                        _context3.prev = 10;\n                        _context3.t0 = _context3[\"catch\"](3);\n                        throw new Error(\"This combination doesnt work\");\n\n                      case 13:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3, null, [[3, 10]]);\n              }));\n\n              return function createContact(_x3) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            deleteContact =\n            /*#__PURE__*/\n            function () {\n              var _ref5 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee4(id) {\n                var result;\n                return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.prev = 0;\n                        _context4.next = 3;\n                        return db.run(\"Delete from contacts where contact_id = \".concat(id));\n\n                      case 3:\n                        result = _context4.sent;\n\n                        if (!(result.stmt.changes == 0)) {\n                          _context4.next = 6;\n                          break;\n                        }\n\n                        throw new Error(\"Contact with id \".concat(id, \" doesnt exist\"));\n\n                      case 6:\n                        return _context4.abrupt(\"return\", true);\n\n                      case 9:\n                        _context4.prev = 9;\n                        _context4.t0 = _context4[\"catch\"](0);\n                        throw new Error(\"Could not delete contact with id \".concat(id) + _context4.t0);\n\n                      case 12:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4, null, [[0, 9]]);\n              }));\n\n              return function deleteContact(_x4) {\n                return _ref5.apply(this, arguments);\n              };\n            }();\n\n            updateContact =\n            /*#__PURE__*/\n            function () {\n              var _ref6 = _asyncToGenerator(\n              /*#__PURE__*/\n              regeneratorRuntime.mark(function _callee5(id, props) {\n                var name, email, stmt, result;\n                return regeneratorRuntime.wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        name = props.name, email = props.email;\n\n                        if (!(!props && !(props.name && props.email))) {\n                          _context5.next = 3;\n                          break;\n                        }\n\n                        throw new Error(\"You must provide a name or an email\");\n\n                      case 3:\n                        stmt = \"\";\n\n                        if (name && email) {\n                          stmt = \"update contacts set name = '\".concat(name, \"', email = '\").concat(email, \"' where contact_id = \").concat(id, \" \");\n                          console.log(stmt);\n                        } else if (name && !email) {\n                          stmt = \"update contacts set name = '\".concat(name, \"' where contact_id = \").concat(id, \" \");\n                        } else {\n                          stmt = \"update contacts set  email = '\".concat(email, \"' where contact_id = \").concat(id, \" \");\n                        }\n\n                        _context5.prev = 5;\n                        _context5.next = 8;\n                        return db.run(stmt);\n\n                      case 8:\n                        result = _context5.sent;\n                        console.log(result);\n\n                        if (!(result.stmt.changes == 0)) {\n                          _context5.next = 12;\n                          break;\n                        }\n\n                        throw new Error(\"Contact with id \".concat(id, \" doesnt exist\"));\n\n                      case 12:\n                        return _context5.abrupt(\"return\", true);\n\n                      case 15:\n                        _context5.prev = 15;\n                        _context5.t0 = _context5[\"catch\"](5);\n                        throw new Error(\"Could not update contact with id \".concat(id) + _context5.t0);\n\n                      case 18:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5, null, [[5, 15]]);\n              }));\n\n              return function updateContact(_x5, _x6) {\n                return _ref6.apply(this, arguments);\n              };\n            }();\n\n            controller = {\n              getContacts: getContacts,\n              createContact: createContact,\n              deleteContact: deleteContact,\n              updateContact: updateContact,\n              getContactByID: getContactByID\n            };\n            return _context6.abrupt(\"return\", controller);\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function initializeDatabase() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _default = initializeDatabase;\nexports[\"default\"] = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "db.js"
      ],
      "names": [
        "initializeDatabase",
        "sqlite",
        "open",
        "db",
        "getContacts",
        "orderBy",
        "stmt",
        "all",
        "rows",
        "length",
        "Error",
        "getContactByID",
        "id",
        "createContact",
        "props",
        "name",
        "email",
        "run",
        "result",
        "lastID",
        "deleteContact",
        "changes",
        "updateContact",
        "console",
        "log",
        "controller"
      ],
      "mappings": "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",
      "sourceRoot": "/home/notroot/Documents/CodiWork/ContactListAppSamar/ContactListApp-B05/03_crud in react/back/src",
      "sourcesContent": [
        "import sqlite from \"sqlite\";\n\nconst initializeDatabase = async () => {\n  const db = await sqlite.open(\"./db.sqlite\");\n\n  const getContacts = async orderBy => {\n    let stmt = \"SELECT contact_id AS id, name, email FROM contacts\";\n    switch (orderBy) {\n      case \"name\":\n        stmt += \" order by name desc\";\n        break;\n      case \"email\":\n        stmt += \" order by email desc\";\n        break;\n      default:\n        break;\n    }\n    try {\n      const rows = await db.all(stmt);\n      if (rows.length == 0) {\n        throw new Error(\"Contacts are empty!\");\n      }\n      return rows;\n    } catch (err) {\n      throw new Error(\"Could not retrieve list of contacts\");\n    }\n  };\n\n  const getContactByID = async id => {\n    try {\n      const rows = await db.all(\n        `SELECT contact_id AS id, name, email FROM contacts where contact_id=${id}`\n      );\n      if (rows.length == 0) {\n        throw new Error(`Contact with id ${id} is not found`);\n      }\n      return rows;\n    } catch (err) {\n      throw new Error(\"Could not retrieve contact\");\n    }\n  };\n\n  const createContact = async props => {\n    const { name, email } = props;\n    if (!props || !name || !email) {\n      throw new Error(`You must provide a name and email`);\n    }\n    try {\n      const result = await db.run(\n        `Insert into contacts (name, email) values ('${name}', '${email}')`\n      );\n      return result.stmt.lastID;\n    } catch (err) {\n      throw new Error(\"This combination doesnt work\");\n    }\n  };\n\n  const deleteContact = async id => {\n    try {\n      const result = await db.run(\n        `Delete from contacts where contact_id = ${id}`\n      );\n      if (result.stmt.changes == 0) {\n        throw new Error(`Contact with id ${id} doesnt exist`);\n      }\n      return true;\n    } catch (err) {\n      throw new Error(`Could not delete contact with id ${id}` + err);\n    }\n  };\n\n  const updateContact = async (id, props) => {\n    const { name, email } = props;\n    if (!props && !(props.name && props.email)) {\n      throw new Error(`You must provide a name or an email`);\n    }\n\n    let stmt = \"\";\n    if (name && email) {\n      stmt = `update contacts set name = '${name}', email = '${email}' where contact_id = ${id} `;\n      console.log(stmt);\n    } else if (name && !email) {\n      stmt = `update contacts set name = '${name}' where contact_id = ${id} `;\n    } else {\n      stmt = `update contacts set  email = '${email}' where contact_id = ${id} `;\n    }\n    try {\n      const result = await db.run(stmt);\n      console.log(result);\n      if (result.stmt.changes == 0) {\n        throw new Error(`Contact with id ${id} doesnt exist`);\n      }\n      return true;\n    } catch (err) {\n      throw new Error(`Could not update contact with id ${id}` + err);\n    }\n  };\n\n  const controller = {\n    getContacts,\n    createContact,\n    deleteContact,\n    updateContact,\n    getContactByID\n  };\n\n  return controller;\n};\n\nexport default initializeDatabase;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1581942819728
  }
}